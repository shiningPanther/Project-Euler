'''

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''


def getDivisors(number):
	divisors = [1, number] # One and its own number - does not work for 1 but doesn't matter
	if number % 2 != 0:
		return []
	if number % 3 != 0:
		return []
	if number % 4 != 0:
		return []
	if number % 5 != 0:
		return []

	for i in range(2, int(number**0.5)+1):
		if number % i == 0:
			divisors.append(i)
			divisors.append(number/i)

	return divisors

def findTriangleNumbers(N):
	triangleNumber = 1
	i = 1
	while True:
		i += 1
		triangleNumber = triangleNumber + i
		divisors = getDivisors(triangleNumber)
		if len(divisors) > N:
			return triangleNumber
			



if __name__ == '__main__':
	divisors = 500
	print(findTriangleNumbers(divisors))